一、Set
特点：
（1）新的数据结构 Set，类似于数组，但是成员的值都是唯一的，没有重复的值。
数组去重 
[...new Set([1,2,2,'2',5,5])]

function dedupe(array) {
  return Array.from(new Set(array));
}
dedupe([1, 1, 2, 3])

（2）Set 本身是一个构造函数，用来生成 Set 数据结构，具有iterable 接口。Set 函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。
const s = new Set();
[2, 3, 5, 4, 5, 2, 2].forEach(x => s.add(x));
for (let i of s) {
  console.log(i);
}

const set = new Set([1, 2, 3, 4, 4]);
[...set]
// [1, 2, 3, 4]

const items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);
items.size // 5

const set = new Set(document.querySelectorAll('div'));
set.size 

const set = new Set();
document
 .querySelectorAll('div')
 .forEach(div => set.add(div));
set.size 

（3）Set 加入值的时候，不会发生类型转换，所以5和"5"是两个不同的值，特殊的地方NaN
let set = new Set();
let a = NaN;
let b = NaN;
set.add(a);
set.add(b);
set // Set {NaN}

(4)Set的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用 Set 保存一个回调函数列表，调用时就能保证按照添加顺序调用


1、实例属性
Set.prototype.constructor：构造函数，默认就是Set函数。
Set.prototype.size：返回Set实例的成员总数。
new Set([1,2,2,'2',5,5]).size

2、实例的方法( 操作方法 | 遍历方法 )
add(value)：添加某个值，返回 Set 结构本身。
let s = new Set();
s.add(1).add(2).add(2);

delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
let s = new Set([1,2,3]);
s.delete(2);

has(value)：返回一个布尔值，表示该值是否为Set的成员。
let s = new Set([1,2,3]);
s.has(4);

clear()：清除所有成员，没有返回值。
let s = new Set([1,2,3]);
s.clear();
console.dir(s);

keys()：返回键名的遍历器
values()：返回键值的遍历器
entries()：返回键值对的遍历器
forEach()：使用回调函数遍历每个成员

由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值）
let set = new Set(['red', 'green', 'blue']);
for (let item of set.keys()) {
  console.log(item);
}
for (let item of set.values()) {
  console.log(item);
}
for (let item of set[Symbol.iterator]()) {
  console.log(item);
}
for (let item of set.entries()) {
  console.log(item);
}

Set.prototype[Symbol.iterator] === Set.prototype.values
for (let x of set) {
  console.log(x);
}

let set = new Set();
set.add(function(){console.log(1)});
set.add(function(){console.log(3)});
set.add(function(){console.log(2)});
set.forEach((value, key) => value());

3、遍历方法的应用
数组的map和filter方法也可以间接用于 Set
let set = new Set([1, 2, 3]);
set = new Set([...set].map(x => x * 2));
// 返回Set结构：{2, 4, 6}
let set = new Set([1, 2, 3, 4, 5]);
set = new Set([...set].filter(x => (x % 2) == 0));
// 返回Set结构：{2, 4}

可以很容易地实现并集（Union）、交集（Intersect）和差集（Difference）。
let a = new Set([1, 2, 3]);
let b = new Set([4, 3, 2]);
// 并集
let union = new Set([...a, ...b]);
// Set {1, 2, 3, 4}
// 交集
let intersect = new Set([...a].filter(x => b.has(x)));
// set {2, 3}
// 差集
let difference = new Set([...a].filter(x => !b.has(x)));
// Set {1}
console.dir(union);
console.dir(intersect);
console.dir(difference);

同步改变原来的 Set 结构
// 方法一
let set = new Set([1, 2, 3]);
set = new Set([...set].map(val => val * 2));
// set的值是2, 4, 6

// 方法二
let set = new Set([1, 2, 3]);
set = new Set(Array.from(set, val => val * 2));
// set的值是2, 4, 6



WeakSet

(1) 成员只能是对象，而不能是其他类型的值
const ws = new WeakSet();
ws.add(1)
// TypeError: Invalid value used in weak set
ws.add(Symbol())
// TypeError: invalid value used in weak set

(2)WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用。WeakSet 适合临时存放一组对象
WeakSet 的成员是不适合引用的，因为它会随时消失。另外，由于 WeakSet 内部有多少个成员，取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测的，因此 ES6 规定 WeakSet 不可遍历。

WeakSet 的一个用处，是储存 DOM 节点，而不用担心这些节点从文档移除时，会引发内存泄漏。
let myElement = document.getElementById('logo');
let myWeakset = new WeakSet();
myWeakset.add(myElement);

const foos = new WeakSet()
class Foo {
  constructor() {
    foos.add(this)
  }
  method () {
    if (!foos.has(this)) {
      throw new TypeError('Foo.prototype.method 只能在Foo的实例上调用！');
    }
  }
}
这里使用 WeakSet 的好处是，foos对实例的引用，不会被计入内存回收机制，所以删除实例的时候，不用考虑foos，也不会出现内存泄漏。


(3)WeakSet 是一个构造函数,可以接受一个数组或类似数组的对象(任何具有 Iterable 接口的对象,对象成员也是对象)作为参数
const a = [[1, 2], [3, 4]];
const ws = new WeakSet(a);

const b = [3, 4];//参数对象成员也是对象
const ws = new WeakSet(b);
// Uncaught TypeError: Invalid value used in weak set(…)

(4)方法
WeakSet.prototype.add(value)：向 WeakSet 实例添加一个新成员
WeakSet.prototype.delete(value)：清除 WeakSet 实例的指定成员
WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在 WeakSet 实例之中。
const ws = new WeakSet();
const obj = {};
const foo = {};

ws.add(window);
ws.add(obj);

ws.has(window); // true
ws.has(foo);    // false

ws.delete(window);
ws.has(window);    // false


二、Map
(1) 相比传统对象，任何值都可以键名
传统对象只接受字符串 Symbol作为键名
const data = {};
const element = document.querySelector('div');
data[element] = 'metadata';
console.log(data['[object HTMLDivElement]'],data[element],data);

const m = new Map();
const o = {p: 'Hello World'};
m.set(o, 'content')
m.get(o) // "content"
m.has(o) // true
m.delete(o) // true
m.has(o) // false

(2)作为构造函数，Map 也可以接受一个任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构参数。该结构的成员是一个个表示键值对的数组
const map = new Map([
  ['name', '张三'],
  ['title', 'Author']
]);
map.size // 2
map.has('name') // true
map.get('name') // "张三"
map.has('title') // true
map.get('title') // "Author"

const set = new Set([
  ['foo', 1],
  ['bar', 2]
]);
const m1 = new Map(set);
m1.get('foo') // 1

const m2 = new Map([['baz', 3]]);
const m3 = new Map(m2);
m3.get('baz') // 3

(3)同样注意键值的唯一性，Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键，解决了同名属性碰撞（clash）的问题 
const map = new Map();
map.set(['a'], 555);
map.get(['a']) // undefined 实际上这是两个值，内存地址是不一样的

const map = new Map();
const k1 = ['a'];
const k2 = ['a'];
map
.set(k1, 111)
.set(k2, 222);
map.get(k1) // 111
map.get(k2) // 222

如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键，比如0和-0就是一个键，布尔值true和字符串true则是两个不同的键。另外，undefined和null也是两个不同的键。虽然NaN不严格相等于自身，但 Map 将其视为同一个键。
let map = new Map();
map.set(-0, 123);
map.get(+0) // 123

map.set(true, 1);
map.set('true', 2);
map.get(true) // 1

map.set(undefined, 3);
map.set(null, 4);
map.get(undefined) // 3

map.set(NaN, 123);
map.get(NaN) // 123

(4) 实例的属性和方法
size 属性
const map = new Map();
map.set('foo', true);
map.set('bar', false);
map.size // 2

set(key, value)
set方法设置键名key对应的键值为value，然后返回整个 Map 结构。如果key已经有值，则键值会被更新，否则就新生成该键。
const m = new Map();
m.set('edition', 6)        // 键是字符串
m.set(262, 'standard')     // 键是数值
m.set(262, 'nah')    // 覆盖

set方法返回的是当前的Map对象，因此可以采用链式写法
let map = new Map()
  .set(1, 'a')
  .set(2, 'b')
  .set(3, 'c');
  
 get(key)
 get方法读取key对应的键值，如果找不到key，返回undefined。
 const m = new Map();
const hello = function() {console.log('hello');};
m.set(hello, 'Hello ES6!') // 键是函数
m.get(hello)  // Hello ES6!
m.get(12);

has(key)
has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。
const m = new Map();
m.set('edition', 6);
m.has('edition')     // true 
m.has('ed')     

delete(key)
delete方法删除某个键，返回true。如果删除失败，返回false。
const m = new Map();
m.set(undefined, 'nah');
m.has(undefined)     // true
m.delete(undefined)
m.has(undefined) 

clear()
clear方法清除所有成员，没有返回值。
let map = new Map();
map.set('foo', true);
map.set('bar', false);
map.size // 2
map.clear()
map.size // 0

遍历方法  
注意: Map 的遍历顺序就是插入顺序。

keys()：返回键名的遍历器。
values()：返回键值的遍历器。
entries()：返回所有成员的遍历器。
forEach()：遍历 Map 的所有成员
const map = new Map([
  ['F', 'no'],
  ['T',  'yes'],
]);
for (let key of map.keys()) {
  console.log(key);
}
for (let value of map.values()) {
  console.log(value);
}
for (let item of map.entries()) {
  console.log(item[0], item[1]);
}
// 或者
for (let [key, value] of map.entries()) {
  console.log(key, value);
}
for (let [key, value] of map[Symbol.iterator]()) {
  console.log(key, value);
}
// 等同于使用map.entries()
for (let [key, value] of map) {
  console.log(key, value);
}

map[Symbol.iterator] === map.entries

//forEach
const map = new Map([
  ['F', 'no'],
  ['T',  'yes'],
]);
map.forEach(function(value, key, map) {
  console.log("Key: %s, Value: %s", key, value);
});
//forEach方法还可以接受第二个参数，用来绑定this
const reporter = {
  report: function(key, value) {
    console.log("Key: %s, Value: %s", key, value);
  }
};
map.forEach(function(value, key, map) {
  this.report(key, value);
}, reporter);



(5)Map 结构与其他数据结构的互相转换

转数组(结合数组的map方法、filter方法，可以实现 Map 的遍历和过滤)
Map 转为数组最方便的方法，就是使用扩展运算符（...）
const map = new Map([
  [1, 'one'],
  [2, 'two'],
  [3, 'three'],
]);
console.log([...map.keys()]);
console.log([...map.values()]);
console.log([...map.entries()]);
console.log([...map]);

const map0 = new Map()
  .set(1, 'a')
  .set(2, 'b')
  .set(3, 'c');
const map1 = new Map(
  [...map0].filter(([k, v]) => k < 3)
);

数组 转为 Map
new Map([
  [true, 7],
  [{foo: 3}, ['abc']]
])

Map 转为对象(有损坏)
function strMapToObj(strMap) {
  let obj = Object.create(null);
  for (let [k,v] of strMap) {
    obj[k] = v;
  }
  return obj;
}
const myMap = new Map()
  .set('yes', true)
  .set('no', false)
  .set({}, false);
strMapToObj(myMap)

对象转为 Map
function objToStrMap(obj) {
  let strMap = new Map();
  for (let k of Object.keys(obj)) {
    strMap.set(k, obj[k]);
  }
  return strMap;
}
objToStrMap({yes: true, no: false})

Map 转为 JSON
Map 的键名都是字符串，这时可以选择转为对象 JSON。
function strMapToObj(strMap) {
  let obj = Object.create(null);
  for (let [k,v] of strMap) {
    obj[k] = v;
  }
  return obj;
}
function strMapToJson(strMap) {
  return JSON.stringify(strMapToObj(strMap));
}
let myMap = new Map().set('yes', true).set('no', false);
strMapToJson(myMap)

Map 的键名有非字符串，这时可以选择转为数组 JSON
function mapToArrayJson(map) {
  return JSON.stringify([...map]);
}
let myMap = new Map().set(true, 7).set({foo: 3}, ['abc']);
mapToArrayJson(myMap)

JSON 转为 Map
JSON 转为 Map，正常情况下，所有键名都是字符串。
function objToStrMap(obj) {
  let strMap = new Map();
  for (let k of Object.keys(obj)) {
    strMap.set(k, obj[k]);
  }
  return strMap;
}
function jsonToStrMap(jsonStr) {
  return objToStrMap(JSON.parse(jsonStr));
}
jsonToStrMap('{"yes": true, "no": false}')

整个 JSON 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组,Map 转为数组 JSON 的逆操作
function jsonToMap(jsonStr) {
  return new Map(JSON.parse(jsonStr));
}
jsonToMap('[[true,7],[{"foo":3},["abc"]]]')



WeakMap
WeakMap结构与Map结构类似，也是用于生成键值对的集合
区别：
（1）WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名
const wm1 = new WeakMap();
const key = {foo: 1};
wm1.set(key, 2);
wm1.get(key) // 2

const map = new WeakMap();
map.set(1, 2)
// TypeError: 1 is not an object!
map.set(Symbol(), 2)
// TypeError: Invalid value used as weak map key
map.set(null, 2)

(2)WeakMap的键名（不包括键值）所引用的对象都是弱引用，不计入垃圾回收机制。垃圾回收机制不将该引用考虑在内
const wm = new WeakMap();
const element = document.getElementById('div');
wm.set(element, 'some information');
wm.get(element) // "some information"
element = null; 

//例子说明 
node --expose-gc //参数表示允许手动执行垃圾回收机制
global.gc()//手动执行一次垃圾回收，保证获取的内存使用状态准确
process.memoryUsage()//// 查看内存占用的初始状态，
//rss: 进程常驻内存
//heapTotal：已申请的堆内存
//heapUsed：已使用的量
//单位都是字节
let wm = new WeakMap();
let key = new Array(5 * 1024 * 1024);
wm.set(key, 1);
global.gc();
process.memoryUsage();
key = null;
global.gc();
process.memoryUsage();
eakMap的专用场合就是，它的键所对应的对象，可能会在将来消失。WeakMap结构有助于防止内存泄漏

用途：
DOM 节点作为键名
let myElement = document.getElementById('logo');
let myWeakmap = new WeakMap();
myWeakmap.set(myElement, {timesClicked: 0});
myElement.addEventListener('click', function() {
  let logoData = myWeakmap.get(myElement);
  logoData.timesClicked++;
}, false);

部署私有属性
const _counter = new WeakMap();
const _action = new WeakMap();
class Countdown {
  constructor(counter, action) {
    _counter.set(this, counter);
    _action.set(this, action);
  }
  dec() {
    let counter = _counter.get(this);
    if (counter < 1) return;
    counter--;
    _counter.set(this, counter);
    if (counter === 0) {
      _action.get(this)();
    }
  }
}
const c = new Countdown(2, () => console.log('DONE'));
c.dec()
c.dec()

没有遍历操作和size属性，只有4个操作方法get()、set()、has()、delete()


