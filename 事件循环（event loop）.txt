历史原因：
JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，
以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，
一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？
所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。
为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，
且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。

注意：是在执行阶段不是编译阶段，当前循环的js是同步，没有执行完，不会进行下一轮。

执行栈：当前主进程
任务队列（task queue）：网络请求回调、事件回调、settimeout等  回调方法，等需要时主进程会过来取

参考网址：http://www.ruanyifeng.com/blog/2014/10/event-loop.html


注意：
# 添加消息
在浏览器里，当一个事件出现且有一个事件监听器被绑定时，消息会被随时添加。如果没有事件监听器，事件会丢失。所以点击一个附带点击事件处理函数的元素会添加一个消息。其它事件亦然。
调用 setTimeout 函数会在一个时间段过去后在队列中添加一个消息。这个时间段作为函数的第二个参数被传入。如果队列中没有其它消息，消息会被马上处理。但是，如果有其它消息，setTimeout消息必须等待其它消息处理完。因此第二个参数仅仅表示最少的时间 而非确切的时间。

参考：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop
https://github.com/creeperyang/blog/issues/26
