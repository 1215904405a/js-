宏任务：
宏任务的例子很多，包括创建主文档对象、解析HTML、执行主线（或全局）JavaScript代码，更改当前URL以及各种事件，如页面加载、输入、网络事件和定时器事件。从浏览器的角度来看，宏任务代表一个个离散的、独立工作单元。运行完任务后，浏览器可以继续其他调度，如重新渲染页面的UI或执行垃圾回收。
setTimeout, setInterval, setImmediate, requestAnimationFrame, I/O, UI rendering.

微任务：
而微任务是更小的任务。微任务更新应用程序的状态，但必须在浏览器任务继续执行其他任务之前执行，浏览器任务包括重新渲染页面的UI。微任务的案例包括promise回调函数、DOM发生变化等。微任务需要尽可能快地、通过异步方式执行，同时不能产生全新的微任务。微任务使得我们能够在重新渲染UI之前执行指定的行为，避免不必要的UI重绘，UI重绘会使应用程序的状态不连续。
process.nextTick, Promises, Object.observe, MutationObserver。

async/await本质上还是基于Promise的一些封装，而Promise是属于微任务的一种。所以在使用await关键字与Promise.then效果类似：
参考： https://juejin.im/entry/58d4df3b5c497d0057eb99ff
https://html.spec.whatwg.org/multipage/webappapis.html#event-loops

执行栈：当前主进程
任务队列（task queue）：网络请求回调、事件回调、settimeout等  回调方法，等需要时主进程会过来取

new Promise(function(resolve, reject) {
  console.log("promise 执行");
  resolve('resolve 执行');
}).then(function(e) {
  console.log(e);
});

setTimeout(function() {
  console.log('setTimeout  执行');
});
setImmediate(function() {
  console.log('setImmediate  执行');
});

process.nextTick(function() {
  console.log('nextTick  执行');
});

console.log('正常执行');
输出：
promise 执行
正常执行
nextTick  执行
resolve 执行
setTimeout  执行
setImmediate  执行


注意：
# 添加消息
在浏览器里，当一个事件出现且有一个事件监听器被绑定时，消息会被随时添加。如果没有事件监听器，事件会丢失。所以点击一个附带点击事件处理函数的元素会添加一个消息。其它事件亦然。
调用 setTimeout 函数会在一个时间段过去后在队列中添加一个消息。这个时间段作为函数的第二个参数被传入。如果队列中没有其它消息，消息会被马上处理。但是，如果有其它消息，setTimeout消息必须等待其它消息处理完。因此第二个参数仅仅表示最少的时间 而非确切的时间。

参考：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop
https://github.com/creeperyang/blog/issues/26
